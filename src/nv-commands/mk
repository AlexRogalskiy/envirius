nv_cmd_default() {
    env_name=""

    # try to find env name
    for par in "$@"
    do
    case $par in
        # skip --<something>
        --*) ;;
        # first non `--<...>` entry is a env name
        *) env_name=$par; break;
    esac
    done

    # if env's name is empty try to generate it
    if [ "$env_name" = "" ]; then
    for par in "$@"
    do
    case $par in
        --*)
            local plugin_name=$(get_plugin_name $par)
            local plugin_ver=$(get_plugin_version $par)

            env_name="$env_name-$plugin_name-$plugin_ver"
            ;;
    esac
    done
    env_name=`echo "$env_name" | sed "s/^-//"`
    fi

    # check that env name is not empty
    if [ "$env_name" = "" ]; then
        echo "Please, enter a name for a new environment."
        echo ""
        cmd_help
        return 1
    fi

    env_name_full=$(get_env_full_path $env_name)

    if [ -d "$env_name_full" ]; then
        echo "Environment with name '$env_name' is already exists."
        echo "Please, choose another name and try again."
        echo ""
        return 1
    fi

    echo "Creating environment: $env_name ..."
    mkdir -p $env_name_full

    # call each plugin for installation into new env
    for par in "$@"
    do
    case $par in
        # handle plugin only
        --*)
            local plugin_name=$(get_plugin_name $par)
            local plugin_ver=$(get_plugin_version $par)
            local plugin_full_path=$(get_plugin_full_path $plugin_name)
            echo " * installing $plugin_name==$plugin_ver ..."

            # activate plugin & call installation part
            . $plugin_full_path

            # check if plugin disabled
            if [ "$plug_state" = "disabled" ]; then
                echo " - plugin disabled."
                continue
            fi

            # install it & timer it
            local inst_start_time=$(get_time)
            plug_install $plugin_name $plugin_ver $env_name_full
            local inst_diff_time=$(get_time_diff $inst_start_time)
            echo " * done (in $inst_diff_time secs.)"
    esac
    done
}

# Plugin installation logic.
# Can be overridden in the plugin body
# (for example, in $NV_HOME/nv-plugin/erlang).
#
# Input:
#   $1 — plugin name (erlang, rust, ...)
#   $2 — plugin version
#   $3 — full path to the environment
plug_install() {
    plugin_name=$1
    version=$2
    env_name_full=$3

    tarball=$(download_file $(plug_url_for_download "$version") \
                "${plugin_name}-${version}.tar.gz")
    # execute in subshell
    (
        local src_path=$(get_cache_full_path "$plugin_name-$version-src")

        # unpacking (if need)
        if [ ! -d "$src_path" ]; then
            mkdir -p "$src_path"
            tar -xzf "$tarball" -C "$src_path"
        fi

        local build_path=$(get_cache_full_path "$plugin_name-$version-build")

        # if not buid yet then do it
        if [ ! -d "$build_path" ]; then
            mkdir -p "$build_path"

            # change directory
            cd "$src_path"
            local subdir=$(find . -mindepth 1 -maxdepth 1 -type d)
            cd "$subdir"

            # compiling
            ./configure --prefix="$build_path"
            make --jobs=$(get_cpu_count)
            make install
        fi

        # copy all bins into new environment
        cp -r "$build_path"/* $env_name_full
    )
}

nv_cmd_desc() {
    echo "Create environment"
}

nv_cmd_help() {
    show_usage "[env-name] [--plugin=version [,--plugin=version]]"
    show_desc "$(nv_cmd_desc)"
    echo "    If environment name is empty then it will be ganerated automatically."
    echo "    For example:"
    echo "      $ $(get_cmd_name) mk --rust=0.9 --erlang=17.0-rc1"
    echo "    Will genarate environment with name 'rust-0.9-erlang-17.0-rc1'."
    echo ""
    echo "    To see all available plugins execute:"
    echo "      $ $(get_cmd_name) plugins"
}

# /* vim: set filetype=sh : */
