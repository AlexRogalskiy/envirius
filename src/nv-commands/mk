nv_cmd_default() {
    local env_name=$(get_first_non_opt_value "$@")
    local save_meta="yes"

    # if env's name is empty try to generate it
    if [ "$env_name" = "" ]; then
    for par in "$@"
    do
    case $par in
        --no-meta)
            ;;
        --*)
            local plugin_name=$(nv_get_plugin_name $par)
            local plugin_ver=$(nv_get_plugin_version $par)

            env_name="$env_name-$plugin_name-$plugin_ver"
            ;;
    esac
    done
    env_name=`echo "$env_name" | sed "s/^-//"`
    fi

    # find --no-meta
    for par in "$@"
    do
    case $par in
        --no-meta)
            save_meta="no"
            ;;
    esac
    done

    # check that env name is not empty
    if [ "$env_name" = "" ]; then
        echo "Please, enter a name for a new environment."
        echo ""
        nv_cmd_help
        return 1
    fi

    local env_name_full=$(get_env_full_path $env_name)

    if [ -d "$env_name_full" ]; then
        echo "Environment with name '$env_name' is already exists."
        echo "Please, choose another name and try again."
        echo ""
        return 1
    fi

    echo "Creating environment: $env_name ..."
    mkdir -p $env_name_full

    # call each plugin for installation into new env
    for par in "$@"
    do
    case $par in
        # skip this option
        --no-meta)
            ;;
        # handle plugin only
        --*)
            local plugin_name=$(nv_get_plugin_name $par)
            local plugin_ver=$(nv_get_plugin_version $par)
            local plugin_full_path=$(get_plugin_full_path $plugin_name)
            echo " * installing $plugin_name==$plugin_ver ..."

            # clear main functions
            unset plug_url_for_download
            unset plug_list_versions
            unset plug_install
            unset plug_post_install_actions
            unset plug_download
            unset plug_unpack
            unset plug_configure

            # source plugin code & call installation part
            . $plugin_full_path

            # check if plugin disabled
            if [ "$plug_state" = "disabled" ]; then
                echo " - plugin disabled."
                continue
            fi

            # save installation start time
            local inst_start_time=$(get_time)

            # main installation part
            if [ "`type -t plug_install`" = "function" ]; then
                plug_install $plugin_name $plugin_ver $env_name_full
            else
                plug_install_default $plugin_name $plugin_ver $env_name_full
            fi

            # call post-install actions
            if [ "`type -t plug_post_install_actions`" = "function" ]; then
                plug_post_install_actions $env_name $env_name_full $plugin_ver
            fi

            # save meta info (if need)
            if [ "$save_meta" = "yes" ]; then
                local info_file_full_path=$(get_env_info_path "$env_name")
                echo "$plugin_name==$plugin_ver" >> "$info_file_full_path"
            fi

            # compute installation time
            local inst_diff_time=$(get_time_diff $inst_start_time)
            echo " * done (in $inst_diff_time secs.)"
    esac
    done
}

plug_download_default() {
    local plugin_name=$1
    local version=$2

    local tarball_url=$(plug_url_for_download "$version")
    local tarball_filename=$(nv_get_filename "$tarball_url")
    local tarball_ext=$(nv_get_filename_ext "$tarball_filename")
    local tarball_cache="${plugin_name}-${version}.${tarball_ext}"
    local tarball=$(nv_download_file "$tarball_url" ${tarball_cache})

    echo "$tarball"
}

# Plugin installation logic.
# Can be overridden in the plugin body
# (for example, in $NV_HOME/nv-plugin/erlang).
#
# Input:
#   $1 — plugin name (erlang, rust, ...)
#   $2 — plugin version
#   $3 — full path to the environment
plug_install_default() {
    local plugin_name=$1
    local version=$2
    local env_name_full=$3

    # execute in subshell
    (
        local src_path=$(get_cache_full_path "$plugin_name-$version-src")
        local build_path=$(nv_get_build_path "$plugin_name" "$version")

        # if not buid yet then do it
        if [ ! -d "$build_path" ]; then

            # if not unpacked yet then do it
            if [ ! -d "$src_path" ]; then

                # downloading source file
                if [ "`type -t plug_download`" = "function" ]; then
                    local tarball=$(plug_download $plugin_name $version)
                else
                    local tarball=$(plug_download_default $plugin_name $version)
                fi

                # unpacking source file
                mkdir -p "$src_path"
                if [ "`type -t plug_unpack`" = "function" ]; then
                    plug_unpack_src $tarball $src_path
                else
                    tar -xzf "$tarball" -C "$src_path"
                fi
            fi

            mkdir -p "$build_path"

            # change directory
            cd "$src_path"
            local subdir=$(find . -mindepth 1 -maxdepth 1 -type d)
            cd "$subdir"

            # compiling
            if [ "`type -t plug_configure`" = "function" ]; then
                plug_configure "$build_path"
            else
                ./configure --prefix="$build_path" || {
                    echo 'envirius: configure failed!' ;
                    rm -rf "$build_path"
                    exit 1;
                }
            fi
            make --jobs=$(get_cpu_count)
            make install
        fi

        # copy all bins into new environment
        cp -r "$build_path"/* $env_name_full
    )
}

nv_cmd_desc() {
    echo "Create environment"
}

nv_cmd_help() {
    nv_show_usage "[env-name] [--plugin=version [,--plugin=version]]"
    nv_show_desc "$(nv_cmd_desc)"
    echo ""
    echo "Options:"
    echo "  --no-meta    Do not store meta information in the environment (plugin list)."
    echo ""
    echo "Examples:"
    echo "    If environment name is empty then it will be ganerated automatically."
    echo "    For example:"
    echo "      $ $(nv_cmd_name) mk --rust=0.9 --erlang=17.0-rc1"
    echo "    Will genarate environment with name 'rust-0.9-erlang-17.0-rc1'."
    echo ""
    echo "    To see all available plugins execute:"
    echo "      $ $(nv_cmd_name) ls-plugins"
}

# /* vim: set filetype=sh : */
